generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// relation storeId ใช้ในการอ้างอิงร้านค้า นั้นๆ เช่น id store ชื่อ 1 
// store.1 จะมี [ product , order , billboard , ... ] โดยใช้ storeId ที่อ้างอิงกับ id ของ store ว่า store เป็น แม่ของ model นั้น ๆ references: [id]
// {  Size => Product   Product[] // 1 size ต้องมี product [] เดียว เช่น {[product1],[product2]}
// Product => size       Size     @relation(fields: [sizeId], references: [id]) //  หนึ่งสินค้า (Product) สามารถมีหลายขนาด (Size) ได้.}
// เช่น product 1 = size xl = [] , size L = []
// references: [id] คือ id ของ store ที่ใช้ อ้างอิงกับ modelอื่นๆ 

// 1 store สามารถมี ได้หลาย bill board , category 
//  storeId มาจาก   data => create => Billboard.storeId: params.storeId
model Store {
  id         String      @id @default(uuid())
  name       String
  userId     String
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  colors     Color[]     @relation("StoreToColor")
  sizes      Size[]      @relation("StoreToSize")
  products   Product[]   @relation("StoreToProduct")
  orders     Order[]     @relation("StoreToOrder")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String // => เชื่อมกับ store
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id]) // Store ข้อมูล เชื่อมกันกับ StoreToBillboard
  label      String
  imageUrl   String
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([storeId]) // สร้าง index ในฐานข้อมูลข storeId
}

model Category {
  id          String    @id @default(uuid())
  storeId     String
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[] @relation("CategoryToProduct")

  @@index([storeId])
  @@index([billboardId]) // สร้าง index ในฐานข้อมูลข billboardId
}

model Size {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[] // 1 size ต้องมี product เดียว

  @@index([storeId])
}

model Color {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@index([storeId])
}

model Product {
  id         String      @id @default(uuid())
  storeId    String
  store      Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId String
  category   Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name       String
  price      Decimal // ทศนิยม
  isFeatured Boolean     @default(false)
  isArchived Boolean     @default(false)
  sizeId     String
  size       Size        @relation(fields: [sizeId], references: [id]) //  หนึ่งสินค้า (Product) สามารถมีหลายขนาด (Size) ได้.
  colorId    String
  color      Color       @relation(fields: [colorId], references: [id])
  images     Image[]
  orderItems OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
  id         String      @id @default(uuid())
  storeId    String
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
